// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: distributedchessboardgeneration/dcg.proto

package distributedchessboardgeneration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChessboardTaskAssignmentClient is the client API for ChessboardTaskAssignment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChessboardTaskAssignmentClient interface {
	GetCb(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ChessboardString, error)
}

type chessboardTaskAssignmentClient struct {
	cc grpc.ClientConnInterface
}

func NewChessboardTaskAssignmentClient(cc grpc.ClientConnInterface) ChessboardTaskAssignmentClient {
	return &chessboardTaskAssignmentClient{cc}
}

func (c *chessboardTaskAssignmentClient) GetCb(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ChessboardString, error) {
	out := new(ChessboardString)
	err := c.cc.Invoke(ctx, "/distributedchessboardgeneration.ChessboardTaskAssignment/GetCb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChessboardTaskAssignmentServer is the server API for ChessboardTaskAssignment service.
// All implementations must embed UnimplementedChessboardTaskAssignmentServer
// for forward compatibility
type ChessboardTaskAssignmentServer interface {
	GetCb(context.Context, *Message) (*ChessboardString, error)
	mustEmbedUnimplementedChessboardTaskAssignmentServer()
}

// UnimplementedChessboardTaskAssignmentServer must be embedded to have forward compatible implementations.
type UnimplementedChessboardTaskAssignmentServer struct {
}

func (UnimplementedChessboardTaskAssignmentServer) GetCb(context.Context, *Message) (*ChessboardString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCb not implemented")
}
func (UnimplementedChessboardTaskAssignmentServer) mustEmbedUnimplementedChessboardTaskAssignmentServer() {
}

// UnsafeChessboardTaskAssignmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessboardTaskAssignmentServer will
// result in compilation errors.
type UnsafeChessboardTaskAssignmentServer interface {
	mustEmbedUnimplementedChessboardTaskAssignmentServer()
}

func RegisterChessboardTaskAssignmentServer(s grpc.ServiceRegistrar, srv ChessboardTaskAssignmentServer) {
	s.RegisterService(&ChessboardTaskAssignment_ServiceDesc, srv)
}

func _ChessboardTaskAssignment_GetCb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessboardTaskAssignmentServer).GetCb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributedchessboardgeneration.ChessboardTaskAssignment/GetCb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessboardTaskAssignmentServer).GetCb(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ChessboardTaskAssignment_ServiceDesc is the grpc.ServiceDesc for ChessboardTaskAssignment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChessboardTaskAssignment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributedchessboardgeneration.ChessboardTaskAssignment",
	HandlerType: (*ChessboardTaskAssignmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCb",
			Handler:    _ChessboardTaskAssignment_GetCb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributedchessboardgeneration/dcg.proto",
}

// ChessboardReturnAssignmentURLClient is the client API for ChessboardReturnAssignmentURL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChessboardReturnAssignmentURLClient interface {
	ReturnCb(ctx context.Context, in *ReturnMessage, opts ...grpc.CallOption) (*Emptyy, error)
}

type chessboardReturnAssignmentURLClient struct {
	cc grpc.ClientConnInterface
}

func NewChessboardReturnAssignmentURLClient(cc grpc.ClientConnInterface) ChessboardReturnAssignmentURLClient {
	return &chessboardReturnAssignmentURLClient{cc}
}

func (c *chessboardReturnAssignmentURLClient) ReturnCb(ctx context.Context, in *ReturnMessage, opts ...grpc.CallOption) (*Emptyy, error) {
	out := new(Emptyy)
	err := c.cc.Invoke(ctx, "/distributedchessboardgeneration.ChessboardReturnAssignmentURL/ReturnCb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChessboardReturnAssignmentURLServer is the server API for ChessboardReturnAssignmentURL service.
// All implementations must embed UnimplementedChessboardReturnAssignmentURLServer
// for forward compatibility
type ChessboardReturnAssignmentURLServer interface {
	ReturnCb(context.Context, *ReturnMessage) (*Emptyy, error)
	mustEmbedUnimplementedChessboardReturnAssignmentURLServer()
}

// UnimplementedChessboardReturnAssignmentURLServer must be embedded to have forward compatible implementations.
type UnimplementedChessboardReturnAssignmentURLServer struct {
}

func (UnimplementedChessboardReturnAssignmentURLServer) ReturnCb(context.Context, *ReturnMessage) (*Emptyy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnCb not implemented")
}
func (UnimplementedChessboardReturnAssignmentURLServer) mustEmbedUnimplementedChessboardReturnAssignmentURLServer() {
}

// UnsafeChessboardReturnAssignmentURLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessboardReturnAssignmentURLServer will
// result in compilation errors.
type UnsafeChessboardReturnAssignmentURLServer interface {
	mustEmbedUnimplementedChessboardReturnAssignmentURLServer()
}

func RegisterChessboardReturnAssignmentURLServer(s grpc.ServiceRegistrar, srv ChessboardReturnAssignmentURLServer) {
	s.RegisterService(&ChessboardReturnAssignmentURL_ServiceDesc, srv)
}

func _ChessboardReturnAssignmentURL_ReturnCb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessboardReturnAssignmentURLServer).ReturnCb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributedchessboardgeneration.ChessboardReturnAssignmentURL/ReturnCb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessboardReturnAssignmentURLServer).ReturnCb(ctx, req.(*ReturnMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ChessboardReturnAssignmentURL_ServiceDesc is the grpc.ServiceDesc for ChessboardReturnAssignmentURL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChessboardReturnAssignmentURL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributedchessboardgeneration.ChessboardReturnAssignmentURL",
	HandlerType: (*ChessboardReturnAssignmentURLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReturnCb",
			Handler:    _ChessboardReturnAssignmentURL_ReturnCb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributedchessboardgeneration/dcg.proto",
}
